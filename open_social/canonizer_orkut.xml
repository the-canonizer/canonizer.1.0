<?xml version='1.0' encoding='UTF-8' ?>
<Module> 
  <ModulePrefs 
        title='Canonizer' 
        title_url='http://www.canonizer.com/'
        description='Compare your values with your friends.'
        author='Dustin Jorge and Brent Allsop'
        author_email='brent.allsop@canonizer.com'
        screenshot='http://canonizer.com/files/canonizer_logo.jpg'
        thumbnail='http://canonizer.com/files/canonizer_thumb.jpg'
        directory_title='Canonizer'
        author_affiliation='Canonizer LLC and iWiddit'
        author_location='Sandy, Utah US'
        author_photo='http://canonizer.com/files/70_100_brent.png'
        author_aboutme='Founder of Canonizer LLC'
        author_quote='Never give up till we have it all for everyone.'
        author_link='http://canonizer.com'
        show_stats=''
        show_in_directory=''
        width=''
        height=''
        category=''
        category2=''
        singleton=''
        scaling=''
        scrolling=''
  >
    <Require feature='opensocial-0.7' /> 
    <Require feature='dynamic-height' /> <!-- gadgets.window -->   
    <Require feature='settitle' /> <!-- gadgets.window.setTitle -->
    <Require feature='skins' /> <!-- gadgets.skins -->  
    <Require feature='views' /> <!-- gadgets.views -->
    <Require feature='tabs' /> <!-- gadgets.tabs -->
  </ModulePrefs>
  <Content type='html'>  
      <![CDATA[
            
            <style type='text/css'>
                @import "http://www.iwiddit.com/xml07/canonizer/canonizer_style.css";
            </style>

            <!-- Begin Canonizer Link Up Form -->
            
            <form id='canonizer_link_up' action='' method=''>
                <fieldset>
                    <legend>Canonizer Account Link Up</legend>
                    <label for='canonizer_id_input'>Canonizer User Name:</label><input type='text' value='' name='canonizer_id' id='canonizer_id_input' />
                    <label for='canonizer_pass_input'>Canonizer Password:</label><input type='password' value='' name='canonizer_pass' id='canonizer_pass_input' />
                </fieldset>
                <fieldset>
                    <input type='button' value='Link Up' id='canonizer_link_up_submit' />
                </fieldset>
                <fieldset id='getId'>
                    <a href='https://canonizer.com/secure/profile_id.asp?register=1'> Don't have a Canonizer id? </a>
                </fieldset> 
           </form>
            
            <!-- End Canonizer Link Up Form -->
            
            <!-- Begin User Not Linked Display -->
            
            <div id='canonizer_user_not_linked'> 
                <div id='canon_title_content'>                    
                    <p>     
                            <img id='canon_title_image_profile' src='#' /> <!-- the source is set by JS to get proxy url --> 
                            <strong>How am I like my friends?</strong>                
                            Everyone has their own beliefs and while documentation of such beliefs is becoming more prominent, quantification of many beliefs is non-existent.  Everything from books, to movies and web sites have been 'reviewed', however, these opinions tend to be scattered and are extremely difficult to quantify.  
                            <br /><br />
                            The <a href='http://canonizer.com'>Canonizer</a> was designed to solve this problem by providing an accurate measure of popular belief.
                            Using this system, anybody can determine the most popular beliefs, opinions, and values by looking at quantative numeric data.
                            <strong class='mc'><a target='_blank' href='http://canonizer.com/topic.asp/10'>Isn't it time to find out where you fit in?</a></strong>
                    </p>
                </div>
            </div>
            
            <!-- End User Not Linked Display -->
            
            
            
            <!-- Begin alternate content containers -->
            
            <div id='canon_content'> 
                <h1>Friends' Canonized Values Comparison</h1>
            </div>
            
            <div id='canon_canv_content'> 
                <div id='canon_title_content'>                    
                    <p>     
                            <img id='canon_title_image' src='#' /> <!-- the source is set by JS to get proxy url --> 
                            <strong>How am I like my friends?</strong>                
                            Everyone has their own beliefs and while documentation of such beliefs is becoming more prominent, quantification of many beliefs is non-existent.  Everything from books, to movies and web sites have been 'reviewed', however, these opinions tend to be scattered and are extremely difficult to quantify.  
                            <br /><br />
                            The <a href='http://canonizer.com'>Canonizer</a> was designed to solve this problem by providing an accurate measure of popular belief.
                            Using this system, anybody can determine the most popular beliefs, opinions, and values by looking at quantitative numeric data.
                            <strong><a target='_blank' href='http://canonizer.com/topic.asp/10'>Where do you fit in?</a></strong>
                    </p>
                </div>
            </div>
            
            <!-- End alternate content containers -->


            <script type='text/javascript' src='http://www.iwiddit.com/xml07/canonizer/jq.js'></script>

            <script type='text/javascript'>
            
                // Core utility methods
                
                /*
                *   Wrapper around document.getElementById
                *   @param :: id :: the id of the DOM element to retrieve
                *   @return :: the DOM element
                */
                    function _gel( id ){ 
                        return document.getElementById( id ); 
                        };
                    
                /*
                *   Trims padding from a string
                *   @param :: str :: the string
                *   @return :: the string with any padding removed from the front and end
                */
                    function trim_str( str ){ 
                        return str.replace( /^\s+|\s+$/g , '' ); 
                    }
                   
                /*
                *   Validates user input and verifies that something was entered
                *   @param :: str :: the input to validate
                *   @return :: a boolean
                *   @requires :: trim_str()
                */
                    function valid_input( str ){
                            return ( trim_str( str ).length > 0 )
                    }  
                /*
                *   Appends a string to the document body as css
                *   @param :: cssText :: the css text to add
                */                    
                    function createCSS(cssText) { 
                        var s = document.createElement('style');
                        s.type = 'text/css';
                        if (s.styleSheet) {
                          s.styleSheet.cssText = cssText;
                        } else {
                          s.appendChild(document.createTextNode(cssText));
                        }
                        document.body.appendChild(s);
                    } 
                    
                /*
                *   Clones an object and returns a copy
                *   @param :: obj :: the object to clone
                *   @return :: a unique object
                */                    
                    function clone_obj( obj ) { 
                        var ret_obj = {};
                        for( x in obj ){
                                ret_obj[x] = obj[x];
                        }
                        return ret_obj;
                    }  
                                       
            </script>
             
             <script type='text/javascript'>
             

                /*
                *   Basic person fetch class
                *   Used to get a Person/People Object
                */
             
                var person_fetch = {
                            /*
                            * fetchs the given Person object, then fires the call_back with the data when finished
                            * @param :: fn :: the call_back function
                            * @param :: person :: the string identifier of the person to fetch
                            * @public
                            */
                            fetch:function( person, fn ){
                                // store this
                                var _self = this;
                                // create disposable request object
                                var req = opensocial.newDataRequest();
                                // pack request object
                                req.add( req.newFetchPersonRequest( person ), 'o' );
                                // send request and proxy returned data locally
                                req.send( function( data ){
                                        _self.handle( fn, data );
                                    } );    
                            }
                            /*
                            * fetchs the given Person object, then fires the call_back with the data when finished
                            * @param :: fn :: the call_back function
                            * @param :: people :: the string identifier of the people to fetch
                            * @public
                            */
                            ,fetch_multi:function( people, fn ){
                                // store this
                                var _self = this;
                                // create disposable request object
                                var req = opensocial.newDataRequest();
                                // pack request object
                                req.add( req.newFetchPeopleRequest( people ), 'o' );
                                // send request and proxy returned data locally
                                req.send( function( data ){
                                        _self.handle( fn, data );
                                    } );    
                            }
                            ,handle:function( fn, data ){
                                try{                                        
                                        fn( data.get('o').getData() );
                                }catch( e ){
                                        fn( null );
                                }
                            }
                }
                
                
                /* 
                * Canonizer IO class
                * Handles requests
                */
                var canon_io = {
                       /*
                       *    creates and parses a json request. See request for further definition
                       */
                       json:function( fn, url, vars ){
                            this.request( 'json', fn, url, vars );
                       }
                       /*
                       * request :: creates and processes a request
                       * @param :: type :: the type of request (json or html)
                       * @param :: fn :: the call_back function to which to send the resulting object
                       * @param :: url :: the url to query
                       * @param :: vars :: an object containing the variables to be passed in. Currently passed via get
                       * @public
                       */
                       ,request:function( type, fn, url, vars ){
                            // get encoded string from object
                            var URIStr = gadgets.io.encodeValues( vars );
                            // save 'this'
                            var _self = this;
                            // create call_back proxy
                            var call_back = function( data ){ 
                                                _self.handle( type, fn, data );
                            };
                            // create a unique url
                            var ts = new Date().getTime();
                            // append variables to url
                            url += "?url_ts=" + ts + "&" + URIStr;                            
                            // create paramater object
                            var params = {};
                            params[ gadgets.io.RequestParameters.AUTHORIZATION ] = gadgets.io.AuthorizationType.SIGNED;
                            switch( type ){
                              case 'json':
                                params[ gadgets.io.RequestParameters.CONTENT_TYPE ] = gadgets.io.MethodType.JSON;
                                break;
                              case 'html':
                                params[ gadgets.io.RequestParameters.CONTENT_TYPE ] = gadgets.io.MethodType.HTML;
                                break;
                            }
                            // send request out
                            gadgets.io.makeRequest( url, call_back, params );
                       }
                       /* Intermediate handling method
                       *  Currently only a passThru
                       *  @param :: type :: the type of request that was sent
                       *  @param :: fn :: the call_back function
                       *  @param :: data :: the returned data
                       *  @private
                       */
                       ,handle:function( type, fn, data ){
                              fn( data.data );
                       }                    
                }
                
                /*
                * Hard-Coded Actions/Methods
                */
                var canon_io_actions = {
                    /*
                    *   pulls data from link up form and submits it via AJAX, then handles the return
                    *   @optParam :: fn :: the call_back (optional)
                    *   @public
                    */
                    do_link_up:function( fn ){ 
                        fn = fn || function( ){ };
                        // init owner object and get owner Person Object
                        person_fetch.fetch( 'OWNER', function( o /*owner*/ ){
                                // get input
                                var id = encodeURI( _gel( 'canonizer_id_input' ).value );
                                var pass = encodeURI( _gel( 'canonizer_pass_input' ).value );
                                if( !valid_input( id ) || !valid_input( pass ) ){
                                     alerts.error( "You didn't enter your credentials." );
                                     return;
                                }
                                // input is valid
                                // TODO :: use https once it starts working.
                                var url = 'http://canonizer.com/open_social/os_container_id_link_up.php';
                                // setup return value proxy
                                var call_back = function( data ){
                                                canon_io_actions.handle_linkup( data, fn );
                                }
                                // get the application owner id
                                var o_id = o.getId();
                                // handle cases where owner has fluked
                                if( o_id ){
                                    var vars = {
                                                    "canonizer_id":id
                                                    ,"canonizer_pw":pass
                                                    ,"os_user_id_token":o_id
                                    };
                                    canon_io.json( call_back, url, vars ); 
                                }else{
                                    // TODO :: handle null owner error
                                    alerts.error( "An error occured. Please try again." );
                                }
                            } ); // end fetch owner
                    }
                    /*
                    * Makes request to get object containing camps/values/matches
                    * @param :: fn :: the call_back (required)
                    * @param :: view :: string containing either 'profile' or 'canvas'. Defaults to canvas.
                    * @public
                    */
                    ,do_get_data:function( fn, view ){                          
                       person_fetch.fetch( 'OWNER', function( o ){  // fetch object to get OWNER Person Object
                           person_fetch.fetch_multi( 'OWNER_FRIENDS', function( oF ){  // fetch object to get OWNER_FRIENDS Object
                                var url = 'http://canonizer.com/open_social/os_values_compare.php';  
                                // create empty array
                                var friend_ids = [];
                                oF.each( function( person ){
                                     friend_ids[ friend_ids.length ] = person.getId();
                                     } );                            
                                // create callback
                                var call_back = function( data ){
                                                canon_io_actions.compile( view, data, fn, oF, o );
                                }
                                // convert to JSON
                                var friends_json = gadgets.json.stringify( friend_ids );
                                // get the application owner id
                                var o_id = o.getId( );
                                // create a vars object
                                var vars = {
                                                    "os_user_id_token":o_id
                                                    ,"open_social_friend_array":friends_json
                                };
                                // send it
                                canon_io.json( call_back, url, vars );
                           } ); // end fetch owner_friends    
                      } ); // end fetch owner
                    }
                    /*
                    *  Creates html from returned data
                    *  @private
                    *  @param :: view :: a string representation of either 'profile' or 'canvas'
                    *  @param :: dat :: the data returned from the makerequest
                    *  @param :: fn :: the callback function
                    *  @param :: oF :: the list of owner_friends
                    */
                    ,compile:function( view, dat, fn, oF, o ){
                        // canonizer results match friend_ids 1 for 1
                        // create array contianing Person Objects for each friend
                        // this will be easier to access from the write method
                        var persons = [];
                        oF.each( function( person ){
                                persons[ persons.length ] = person;                            
                        });
                        // get result object from canonizer server
                        var data = gadgets.json.parse( dat );
                        // if an error message came from the server, show the link up form
                         if( !data ){
                            if( o.isViewer() ) canon_ui_toggle.show_interface( 'canonizer_link_up' );
                            else canon_ui_toggle.show_interface( 'canonizer_user_not_linked' );
                            return;
                         }
                        // show numeric values on profile and full lists on canvas.
                         if( view == 'profile' ){
                                var text = {
                                    shared_count_text:"Agreed: ",
                                    different_count_text:"Disputed: ", 
                                    not_linked:"Not Linked"   
                                }
                                var html = canon_write.get_count_html( data, persons, 'xxcount', text );
                                // make css for random backgrounds
                                var newCSS = "";
                                for( i = 1, i_x = 5; i <= 5; i++ ){
                                    newCSS += "div.xxcount_" + i + "{ background-image:URL('" + gadgets.io.getProxyUrl( base_media_directory + "block_bg_" + i + ".png" ) + "');background-position:bottom right; }";    
                                }
                                // append the css to the body
                                createCSS( newCSS );
                                this.write_profile_html( html, 'xxcount', fn );
                         }else{  
                            // phrases to use inside of the printed html
                             var text = {
                                    shared_heading:'Items we agree upon:',
                                    difference_heading:'Items we do not agree upon:',
                                    my_camps:"<owner_name>'s Camps:",
                                    friend_camps:"<person_name>'s Camps:",
                                    no_camps:"I don't share any camps with this person.",
                                    not_linked:"<person_name> ( Not Canonized ).",
                                    no_shared_subcamps:"We don't share any opinions.",
                                    no_different_subcamps:"We don't differ on any sub-camp." 
                             }                          
                            // create html from result
                            var html = canon_write.get_html( data, persons, 'xxlist', text, o );
                            this.write_canvas_html( html, 'xxlist', fn );    
                         }              
                    }
                    /*
                    * Handles the html object created by canon_write.get_html for profile. This method envokes click handlers via jQuery
                    */                    
                    ,write_profile_html:function( html, eId, fn ){
                                var id_to_write = 'canon_content';
                                canon_ui_toggle.show_interface( id_to_write );
                                _gel( id_to_write ).innerHTML += html; // jQuery .html( ) replaces
                                $( '#' + id_to_write + ' li' ).click( function(){
                                         gadgets.views.requestNavigateTo( new gadgets.views.View( 'canvas' )  );                                    
                                });                               
                                // attempt to resize the iframe
                                try{
                                    // adjust ifram height
                                    gadgets.window.adjustHeight();
                                    this.style_canon_links();
                                    // fire callback
                                    fn();
                                }catch(e){};
                    }
                    /*
                    * Handles the html object created by canon_write.get_html for canvas. This method envokes click handlers via jQuery
                    */
                    ,write_canvas_html:function( html, eId, fn ){
                                // id of container/interface
                                var id_to_write = 'canon_canv_content';
                                // make this interface current
                                canon_ui_toggle.show_interface( id_to_write );
                                // hide element for display
                                $( '#' + id_to_write ).hide();
                                // add html to element
                                _gel( id_to_write ).innerHTML += html;  
                                // logo image
                                _gel('canon_title_image').src = gadgets.io.getProxyUrl( base_media_directory + "canonizer_logo.jpg" );                   
                                this.style_canon_links();
                                // add onclick handlers to arrow icons                     
                                $('dl#' + eId + ' dt div.canon_toggle_arrow').toggle(
                                    function(){
                                            $(this).parent().next('dd').hide();
                                            $(this).css({backgroundPosition:"0px 1px"});  
                                    },
                                    function(){
                                            $(this).parent().next('dd').show();
                                            $(this).css({backgroundPosition:"0px -10px"});
                                    }
                                );
                                // toggle individual camps open
                                $('dl#' + eId + ' dd dd dd dt div.canon_toggle_arrow').trigger('click');
                                // toggle individual POVs closed
                                $('dl#' + eId + ' dd dd dt div.canon_toggle_arrow').trigger('click'); 
                                // show element                            
                                $( '#' + id_to_write ).show();
                                try{
                                    // resize ifrme
                                    gadgets.window.adjustHeight(800);
                                    // fire callback
                                    fn();
                                }catch(e){};
                    }
                    /*
                    *   adds hover effect to canon icon links
                    *   @private
                    */
                    ,style_canon_links:function(){
                        // add hover color to canon link icons
                        $( 'img.canon_link_icon' ).mouseover( function(){
                              this.src = gadgets.io.getProxyUrl( base_media_directory + "new_page_red.png" );
                        } ); 
                        $( 'img.canon_link_icon' ).mouseout( function(){
                              this.src = gadgets.io.getProxyUrl( base_media_directory + "new_page_blue.png" );
                        } );
                        $( '.canon_toggle_arrow' ).css( {
                            marginTop:( $.browser.msie ? "2px" : "3px" ),
                            backgroundImage:"URL('" + gadgets.io.getProxyUrl( base_media_directory + "toggle_arrow.png" ) + "')"
                        } );
                        // on the profile, this adds an click handler for both 'agreed' and 'disputed' that navigates to the app canvas
                        $( 'dl#xxcount div li' ).click( function(){
                                        gadgets.views.requestNavigateTo( new gadgets.views.View( 'canvas' ) );
                            } );
                    }
                    /* Updates the linkup idetifier on the container servers
                    * @param :: dat :: the returned data
                    * @private
                    */
                    ,handle_linkup:function( dat, fn ){
                        var dCheck = dat.toLowerCase();
                        if( dCheck.substring(0,2) == "ok" || dCheck == "error: this user is already linked.\n" ) link_check.set( true, fn );
                        else alerts.error( dat );
                        return;
                    }
                }
            
                /*
                *   User Interface Handler
                *   Toggles between interfaces
                */
                var canon_ui_toggle = {
                                 // stores ids that have been shown. Used for hiding. @private
                                 ids:null 
                                 /* 
                                 *  Hides all elements then shows the element who's id is specified   
                                 *  @public                            
                                 */
                                 ,show_interface:function( id ){
                                    this.ids = this.ids || [ ];
                                    this.hide_all( );
                                    this.show_specific( id );
                                    this.show_elem( id );
                                    this.ids[ this.ids.length ] = id;
                                    return;
                                 }
                                 /*
                                 *  Handles specific actions for some interfaces
                                 *  @private
                                 */
                                 ,show_specific:function( id ){
                                    switch( id ){
                                        case "canonizer_link_up":
                                            _gel("canonizer_link_up").style.backgroundImage = "URL('" + gadgets.io.getProxyUrl( base_media_directory + "block_bg_3.png" ) + "')";
                                            try{
                                                gadgets.window.adjustHeight(220);
                                                }catch(e){}
                                            break;
                                        case "canonizer_user_not_linked":
                                            try{                                                
                                                 _gel('canon_title_image_profile').src = gadgets.io.getProxyUrl( base_media_directory + "canonizer_logo.jpg" );                                   
                                                document.body.style.overflow = 'hidden' // this fixes IE7
                                                gadgets.window.adjustHeight(270);
                                                }catch(e){}
                                            break;
                                        default:
                                            break;
                                        }
                                 }
                                 /*
                                 *  Hides all elements with ids contained in the ids array
                                 *  @private
                                 */
                                 ,hide_all:function( ){
                                    var ids = this.ids;
                                    for( var i = 0; i < ids.length; i++ ){
                                        _gel( ids[ i ] ).style.display = 'none';
                                    }
                                    return;
                                 }
                                 /*
                                 *  Shows an element by id
                                 *  @private
                                 */
                                 ,show_elem:function( id ){
                                    _gel( id ).style.display = 'block'; 
                                    return;  
                                 }
                }
                
                alerts = {
                            /*
                            *   Handles an error with a message attached.
                            *   @param :: str :: the error message
                            */
                            error:function( str ){
                                // TODO :: build alert functionality...
                                alert( "Error: " + str );
                            }
                        }
            </script>   

            <script type='text/javascript'>

                    var canon_write = {
                            // stores the id of the outer html element
                            id:null
                            /*
                            *   Gets the html for the profile display. Shows numeric values for shared and different camps.
                            *   @param :: data :: the data returned from the canonizer server
                            *   @param :: friends :: an array of friends' Person objects that coorelate with the ids sent to the canonizer server
                            *   @param :: id :: the id to assign to the outermost html element
                            *   @param :: text :: an arguments object with the following:
                            *               text syntax :: 
                                            *    var text = {
                                            *                   shared_count_text:"Agreements: ",
                                            *                   different_count_text:"Disagreements: "    
                                            *               }
                            *   @return :: an html string
                            */
                            ,get_count_html:function( data, friends, id, text ){
                                var counts = {};
                                var html = "<div id='" + id + "'>";
                                for( var i = 0, i_x = data.length; i < i_x; i++ ){ // each friend
                                            var shared = data[i].same || [];
                                            var diffs = data[i].different || [];
                                            var thumb = friends[i].getField( opensocial.Person.Field.THUMBNAIL_URL );
                                            var rElem = Math.ceil( Math.random() * 4 ); 
                                            // create html with random classname ( id_1 - id_5 )
                                            html += "<div class='" + id + "_" + rElem + "'>"; 
                                                html += "<a class='prof_img' href='" + this.getProfileUrl( friends[ i ] ) + "' target='_top'><img src='" + thumb + "' alt='" + this.getName( friends[i] ) + "' /></a>";                                                                                                  
                                                var link = data[i].cid ? this.make_link( this.getName( friends[i] ), this.make_canon_href( data[i].cid ), true ) : this.make_empty_link( this.getName( friends[i] ), true )
                                                html += "<dl><dt>" + link + "</dt>";
                                                    html += "<dd><ul>";
                                                        if( !data[i].same ) html += "<li>" + text.not_linked + "</li>";
                                                        else{
                                                            html += "<li>" + text.shared_count_text + shared.length + "</li>";
                                                            html += "<li>" + text.different_count_text + diffs.length + "</li>";
                                                        }
                                                    html += "</ul></dd>";
                                                html += "</dl>";
                                            html += "</div>";                           
                                }
                                html += "</div>";
                                return html;
                            } 
                            /*
                            *   Build html structure from object returned from the canonizer servlets
                            *   @public
                            *   @param :: data :: the data object returned from the canonizer
                            *   @param :: friends :: the list of friends matching one to one with the canonizer data (Person objects)
                            *   @id :: id :: the id to be applied to the outermost html element
                            *   @text :: text :: an object containing text values for use in the html
                            *       Text Syntax ::
                            *               var text = {
                            *                   shared_heading:'Items we agree upon:',
                            *                   difference_heading:'Items we do not agree upon:',
                            *                   my_camps:'My Camps:',
                            *                   friend_camps:'Friend Camps:',
                            *                   no_camps:"I don't share any camps with this person.",
                            *                   not_linked:"This person isn't linked to the canonizer.",
                            *                   no_shared_subcamps:"We don't share any sub-camps.",
                            *                   no_different_subcamps:"We don't differ on any sub-camp." 
                            *               }         
                            */
                            ,get_html:function( data, friends, id, t, owner ){
                                var owner_name = owner.getField( opensocial.Person.Field.NAME ).getField( opensocial.Name.Field.UNSTRUCTURED );
                                // replace <owner_name> in text
                                for( x in t ){
                                        t[x] = t[x].replace( "<owner_name>", owner_name );
                                    }
                                // create html string
                                this.id = id;
                                var dl = '<dl>';
                                var dd = '<dd>';
                                var dt = '<dt>';
                                var _dl = '</dl>';
                                var _dd = '</dd>';
                                var _dt = '</dt>';
                                var ul = '<ul>';
                                var li = '<li>';
                                var _ul = '</ul>';
                                var _li = '</li>';
                                // need an clearable element to ensure outer element expands properly.
                                var clr = "<div id='" + id + "_clr'> &nbsp; </div>";
                                var html = "<dl id='" + id + "'>";
                                for( var i = 0, i_x = data.length; i < i_x; i++ ){ // each friend
                                        if( data[i].linked == 1 ){ // this friend is linked up 
                                            var shared = data[i].same;
                                            var diffs = data[i].different;
                                            var friend_name = friends[i].getField( opensocial.Person.Field.NAME ).getField( opensocial.Name.Field.UNSTRUCTURED );                                
                                            var text = clone_obj(t);
                                            // replace <person_name> in text
                                            for( x in text ){
                                                    text[x] = friend_name && friend_name != "undefined" /* string value */ ? text[x].replace( "<person_name>", friend_name ) : text[x].replace( "<person_name>", "This person" );
                                            }
                                            html += dt +  this.make_link( this.getName( friends[i] ), this.make_canon_href( data[i].cid ) )  + _dt;
                                            if( shared.length > 0 || diffs.length > 0 ){
                                                    html += "<dd>"; 
                                                        var thumb = friends[ i ].getField( opensocial.Person.Field.THUMBNAIL_URL );
                                                        var href = this.getProfileUrl( friends[i] );
                                                        html += "<a class='prof_img' href='" + href + "' target='_top'><img src='" + thumb + "' alt='" + friend_name + "' /></a>";
                                                        html += dl;
                                                                html += dt + this.make_empty_link( text.shared_heading ) + _dt;
                                                                if( shared.length > 0 ){ // has shared camps                                                
                                                                    html += dd;   
                                                                        html += dl;         
                                                                            for( var j = 0, j_x = shared.length; j < j_x; j++ ){ // each shared POV                               
                                                                                    html += dt + this.make_topic_link( shared[j].topic_num, shared[j].topic ) + _dt;
                                                                                    html += dd;
                                                                                        html += ul;
                                                                                            for( var k = 0, k_x = shared[j].camps.length; k < k_x; k++ ){ // each shared camp
                                                                                                    html += li + this.make_topic_link( shared[j].topic_num, shared[j].camps[k].title, shared[j].camps[k].statement_num, true ) + _li;
                                                                                            }
                                                                                        html += _ul;
                                                                                    html += _dd;
                                                                            }
                                                                        html += _dl;
                                                                    html += _dd;
                                                                }else{ // no shared camps 
                                                                    html += dd + "<em>" + text.no_shared_subcamps + "</em>" + _dd;
                                                                }
                                                                html += dt + this.make_empty_link( text.difference_heading ) + _dt;
                                                                if( diffs.length > 0 ){ // has different camps
                                                                    html += dd;                                                
                                                                            html += dl;
                                                                            for( var j = 0; j < diffs.length; j++ ){ // each different POV
                                                                                html += dt + this.make_topic_link( diffs[j].topic_num, diffs[j].topic ) + _dt;
                                                                                html += dd;
                                                                                    html += dl;
                                                                                        html += dt + this.make_empty_link( text.my_camps ) + _dt;
                                                                                        html += dd;
                                                                                            html += ul;
                                                                                                for( var k = 0, k_x = diffs[j].my_camps.length; k < k_x; k++ ){ // my camps
                                                                                                       html += li + this.make_topic_link( diffs[j].topic_num, diffs[j].my_camps[k].title, diffs[j].my_camps[k].statement_num, true) + _li;                                                                        
                                                                                                }
                                                                                            html += _ul;
                                                                                        html += _dd;
                                                                                        html += dt + this.make_empty_link( text.friend_camps ) + _dt; // TODO :: name friends
                                                                                        html += dd;
                                                                                            html += ul;
                                                                                                for( var k = 0, k_x = diffs[j].friend_camps.length; k < k_x; k++ ){ // friend camps
                                                                                                       html += li + this.make_topic_link( diffs[j].topic_num, diffs[j].friend_camps[k].title, diffs[j].friend_camps[k].statement_num, true) + _li;                                                                        
                                                                                                }
                                                                                            html += _ul;
                                                                                        html += _dd;
                                                                                    html += _dl;
                                                                                 html += _dd;          
                                                                            }
                                                                            html += _dl;
                                                                     html += _dd;
                                                                }else{ // no different subcamps
                                                                    html += dd + "<em>" + text.no_different_subcamps + "</em>" + _dd;
                                                                }
                                                          html += _dl;                                                            
                                                    html += clr;
                                                    html += _dd;     
                                            }else{ // no shared or different camps
                                                    html += dd + text.no_camps + _dd;
                                            }
                                        }else{ // this friend isn't linked up
                                            html += "<dt class='not_linked'>" + this.make_empty_link( this.getName( friends[i] ) + " ( Hasn't installed this app )", true ) + _dt;
                                        }
                                }
                                html += _dl;
                                return html;
                            } 
                            /*
                            *   A simple wrapper around the getURL process from the OS person object
                            */ 
                            ,getProfileUrl:function( person ){
                                var url = person.getField( opensocial.Person.Field.PROFILE_URL );
                                if( url == "undefined" || url == "" || !url ) url = "javascript:void(0)";
                                return url;  
                            }
                            /*
                            *   A simple wrapper around the getName process from the OS Person Object
                            */
                            ,getName:function( person ){
                                var name = trim_str( person.getField( opensocial.Person.Field.NAME ).getField( opensocial.Name.Field.UNSTRUCTURED ) );
                                if( name == "undefined" || name == "" || !name ) name = "This person";
                                return name;
                            }
                            /*
                            *   Creates the toggle arrow html
                            *   @private
                            */
                            ,getToggleArrow:function(){
                                return "<div class='canon_toggle_arrow'> &nbsp; </div>";    
                            }
                            /*
                            *   Creates a link with toggle arrow
                            *   @private
                            */
                            ,make_link:function( text, href, noArrow_, target_ ){
                                var arrow = noArrow_ ? "" : this.getToggleArrow();
                                var target = target_ ? "target='" + target_ + "'" : "target='_blank'";
                                return arrow + "<a " + target + " href='" + href + "'>" + text + "</a>";
                            }
                            /*
                            *   Creates an empty (no href) expanding link
                            *   @private
                            */
                            ,make_empty_link:function( text, noArrow_ ){
                                var arrow = noArrow_ ? "" : this.getToggleArrow();
                                return arrow + "<a class='no_link' href='javascript:void(0)'>" + text + "</a>";
                            }
                            /*
                            *   Creates a link to a canonizer topic
                            *   @private
                            */
                            ,make_topic_link:function( topic_num, text, statement_num_, noArrow_ ){
                               var href = "http://canonizer.com/topic.asp/" + ( statement_num_ ? topic_num + "/" + statement_num_ + "?" : topic_num + "?" );
                               return this.make_link( text, href, noArrow_ );
                            }  
                            /*
                            *   Creates a link to an individual on the canonizer.
                            *   @private
                            */
                            ,make_canon_href:function( cId ){
                               return "http://canonizer.com/support_list.asp?list_cid=" + cId;  
                            }
                    }

            </script>
            
            <script type='text/javascript'>
                var link_check = {
                        check:function( fn ){
                            var reqObj = opensocial.newDataRequest();
                            reqObj.add( reqObj.newFetchPersonAppDataRequest( "OWNER", "isLinked" ), "owner_is_linked" );
                            reqObj.add( reqObj.newFetchPersonRequest( "OWNER" ), "o" );
                            var _self = this;
                            reqObj.send( function( dat ){ _self.parseLinked( fn, dat ); } );    
                        }
                        ,parseLinked:function( fn, dat ){
                            try{
                                var owner_is_linked = dat.get("owner_is_linked").getData();
                                var owner = dat.get("o").getData();
                                // still under owner id... but there's only one result
                                // TODO :: you have owner now...
                                for( x in owner_is_linked ){
                                        // overwrite variable
                                        var is_linked = owner_is_linked[x].isLinked;
                                }
                                fn( ( is_linked == "true" ), owner );
                            }catch(e){
                                alerts.error( e );
                            }
                        }
                        ,set:function( isLinked, fn ){
                            var reqObj = opensocial.newDataRequest();
                            reqObj.add( reqObj.newUpdatePersonAppDataRequest( "VIEWER", "isLinked", true ), "owner_is_linked" );
                            reqObj.send( fn );                            
                        }
                        ,clear:function( ){
                            var reqObj = opensocial.newDataRequest();
                            reqObj.add( reqObj.newUpdatePersonAppDataRequest( "VIEWER", "isLinked", false ), "owner_is_linked" );
                            reqObj.send(  );                             
                        }
                    }
            </script>
                         
            <script type='text/javascript'>
                /* 
                * Onload Handlers
                */
                function Driver(){
                        canon_init();
                        canon_start();
                }
                                              
                // register onload handler methods
                gadgets.util.registerOnLoadHandler( Driver );
                
                /*
                * Primary method called after init
                */
                function canon_start(){
                    link_check.check( function( isLinked, owner ){
                        if( !isLinked ){
                            if( owner.isViewer() ) canon_ui_toggle.show_interface( 'canonizer_link_up' );
                            else canon_ui_toggle.show_interface( 'canonizer_user_not_linked' );
                        }else{                       
                            canon_io_actions.do_get_data(                                                                                         
                                            function(){ },
                                            gadgets.views.getCurrentView().getName()
                                        );
                        }
                    } );
                }
                
                /*
                * Initialize items, add call_backs etc
                */                
                function canon_init(){ 
                        // base directory for media files 
                        // note: also need to update path for jquery which is just above
                        // note: this only affects media files
                        // note: include trailing /
                        base_media_directory = "http://www.iwiddit.com/xml07/canonizer/images/";
                        _gel( 'canonizer_link_up_submit' ).onclick = function(){
                                canon_io_actions.do_link_up( function(){
                                                    canon_io_actions.do_get_data(                                                                                         
                                                        function(){ },
                                                        gadgets.views.getCurrentView().getName()
                                                     );    
                                } );
                      }
                }
                
             </script>

      
      ]]>  
  </Content>  
</Module>